
--Oracle 내장함수
-- : DUAL 테이블 
-- 1. Oracle에서 자체적으로 제공하는 테이블
-- 2. 간단하게 함수를 이용해서 계산 결과값을 확인할때 사용
-- 3. SYS사용자(신급권한)가 소유하는 Oracle의 표준 테이블
-- 4. SYS사용자가 소유하지만 어느 사용자든 접근 가능
-- 5. 오직 한 행, 한 컬럼만 담고 있는 dummy테이블
-- : DUAL 테이블 사용용도
-- 1. 사용자가 함수(계산)를 실행할 때 임시로 사용하는데 적합
-- 2. 함수에 대한 쓰임을 알고 싶을 때 특정 테이블 생성없이 dual을 사용하면 return받을 수 있음.

-- ex)현재시간 출력
SELECT SYSDATE FROM DUAL;

--ex) 시퀀스 현재번호 출력
SELECT seq_sale.CURRVAL FROM DUAL;

-- ex) 시퀀스 다음 번호 출력
SELECT seq_sale.NEXTVAL FROM DUAL;


-- ** 숫자형 함수 **

--1. ABS 절대값을 반환하는 함수
SELECT ABS(-1.234) absolute FROM DUAL;

--2. CEIL 올림값을 반환하는 함수
SELECT CEIL(10.1234)FROM DUAL;

--3. FLOOR 버림값을 반환하는 함수
SELECT FLOOR(10.1234) FROM DUAL;

--4. MOD 함수를 m을 n으로 나눈 나머지 반환, n이 0일경우 m을 반환
SELECT MOD(9, 4) FROM DUAL;

--5. ROUND n값의 반올림을 하는 함수로 m은 소숫점 아래 자릿수를 나타냄
SELECT ROUND(192.153, 1) FROM DUAL;
SELECT ROUND(192.153, -1) FROM DUAL;

--6. TRUNC n값을 절삭하는 함수 m은 소숫점 아래 자릿수를 나타냄
SELECT TRUNC(7.5997, 2) FROM DUAL;
SELECT TRUNC(789.5597, -2) FROM DUAL;

-- ** 문자형 함수 **
--1. CONCAT 두 문자를 결합, '||'<=LIKE절
--ex) '%'||keyword||'%' => '%keyword%'
SELECT CONCAT('www.', 'oracle.')||'com' FROM DUAL;

--2. INITCAP(char), LOWER(char), UPPER(char)
--INITCAP : 주어진 문자열의 첫 번째 문자를 대문자로 변환
--LOWER : 주어진 문자열을 소문자로 변환
--UPPER : 주어진 문자열을 대문자로 변환
SELECT INITCAP('oracle') name FROM DUAL;
SELECT LOWER('oracle') name FROM DUAL;
SELECT UPPER('oracle') name FROM DUAL;

--3.LENGTH(char), LENGTHB(char)
--문자열의 길이를 반환
SELECT LENGTH('오라클자바') len FROM DUAL;--결과 : 5(순수글자수)
SELECT LENGTHB('오라클자바') len FROM DUAL;--결과 : 15(글자 바이트수, 한글 1글자당 3byte)

--4. REPLACE(char1, str1, str2)
--문자열의 특정 문자를 다른 문자로 변환
SELECT REPLACE('오라클자바', '오라클', '파이썬') FROM DUAL;

--5. INSTR(char1, str1, m, n)
--문자열이 포함되어 있는지 조사하여 문자열의 위치를 반환, 문자열이 발견되지 않으면 0이 반환
-- char1: 지정문자, str1:검색문자, m:시작위치, n:검색순위
SELECT INSTR('CORPORATE FLOOR', 'OK') FROM DUAL;
SELECT INSTR('CORPORATE FLOOR', 'OR') FROM DUAL;
SELECT INSTR('CORPORATE FLOOR', 'OR', 3, 2) idx FROM DUAL;

--6.TRIM
--특정한 문자를 제거, 제거할 문자를 입력하지 않으면 기본적으로 공백이 제거
SELECT TRIM('   오라클자바') FROM DUAL;

-- 집계 함수
-- 1. GROUP BY 절을 이용하여 그룹 당 하나의 결과로 그룹화 할 수 있다.
-- 2. HAVING절을 사용하여 집계함수를 이용한 조건 비교를 할 수 있다.
-- 3. MIN, MAX 함수는 모든 자료형에 사용할 수 있다.

--1. COUNT : 검색된 행의 수를 반환
SELECT COUNT(deptno) FROM dept;

--2. MAX : 최대값 반환
SELECT MAX(sal) salary FROM emp;

--3. MIN : 최소값 반환
SELECT MIN(sal) salary FROM emp;

--4. SUM : 합을 반환
SELECT SUM(sal) salary
FROM emp
WHERE deptno = 30;

--5. STDDEV : 표준편차
SELECT ROUND(STDDEV(sal), 3) salary
FROM emp
WHERE deptno = 30;

-- 집계함수 예
SELECT deptno 부서번호, COUNT(*) 사원수,
       MAX(sal) 최대급여, MIN(sal) 최소급여,
       SUM(sal) 급여합계, ROUND(AVG(sal)) 평균급여
FROM emp
GROUP BY deptno
ORDER BY SUM(sal) DESC;

--SELECT의 GROUP BY절
-- 1. 데이터를 원하는 그룹으로 나눌 수 있음
-- 2. 나누고자 하는 그룹의 컬럼명을 SELECT절과 GROUP BY 절 뒤에 추가하면 됨
-- 3. 집계함수와 함께 사용되는 상수는 GROUP BY 절에 추가하지 않아도 된다. 


--ex) 부서별 사원수 조회
SELECT '2020년' year, deptno 부서번호, COUNT(*) 사원수
FROM emp
GROUP BY deptno
ORDER BY COUNT(*) DESC;

--ex) 부서별로 그룹하여 부서번호, 인원수, 급여의 평균, 급여의 합을 조회
SELECT deptno 부서번호, COUNT(*) 인원수, ROUND(AVG(sal)) 급여평균, SUM(sal) 급여합계
FROM emp
GROUP BY deptno;


--SELECT에 HAVING절
--  1. WHERE절에서는 집계함수를 사용할 수 없음
--  2. HAVING절은 집계함수를 가지고 조건비교를 할 때 사용
--  3. HAVING절은 GROUP BY절과 함께 사용

-- ex) 사원수가 다섯 명이 넘는 부서와 사원수를 조회
SELECT d.dname, COUNT(e.empno) 사원수
FROM emp E, dept d
WHERE e.deptno = d.deptno
GROUP BY dname
HAVING COUNT(e.empno) >= 5
ORDER BY dname;

-- 1. FROM : emp 전체(14건), dept 전체(4건)
-- 2. WHERE : emp테이블의 deptno와 dept테이블의 deptno에 값이 같으면 JOIN
-- 3. GROUP BY : JOIN된 14건의 결과에서 dname컬럼의 값으로 그룹핑(3종류 : ACCOUNTING, RESEARCH, SALES)
-- 4. HAVING : 그룹핑 된 3건의 결과 중 사원수가 5보다 크거나 같은 2그룹(RESEARCH, SALES)
-- 5. SELECT : 출력하고 싶은 컬럼 지정 ( 사원이름, 사원수)
-- 6. ORDER BY  : 정렬(dname을 오름차순 정렬 : 알파벳 a, b, c ... 순)

