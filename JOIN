--
DROP TABLE EMP;
DROP TABLE DEPT;
DROP TABLE BONUS;
DROP TABLE SALGRADE;
DROP TABLE DUMMY;
 
CREATE TABLE EMP
       (EMPNO NUMBER(4) PRIMARY KEY,
        ENAME VARCHAR2(10),
        JOB VARCHAR2(9),
        MGR NUMBER(4),
        HIREDATE DATE,
        SAL NUMBER(7, 2),
        COMM NUMBER(7, 2),
        DEPTNO NUMBER(2));
 
INSERT INTO EMP VALUES
        (7369, 'SMITH',  'CLERK',     7902,
        sysdate,  800, NULL, 20);
         
INSERT INTO EMP VALUES
        (7499, 'ALLEN',  'SALESMAN',  7698,
        sysdate, 1600,  300, 30);
         
INSERT INTO EMP VALUES
        (7521, 'WARD',   'SALESMAN',  7698,
        sysdate, 1250,  500, 30);
         
INSERT INTO EMP VALUES
        (7566, 'JONES',  'MANAGER',   7839,
        sysdate,  2975, NULL, 20);
         
INSERT INTO EMP VALUES
        (7654, 'MARTIN', 'SALESMAN',  7698,
        sysdate, 1250, 1400, 30);
         
INSERT INTO EMP VALUES
        (7698, 'BLAKE',  'MANAGER',   7839,
        sysdate,  2850, NULL, 30);
         
INSERT INTO EMP VALUES
        (7782, 'CLARK',  'MANAGER',   7839,
        sysdate,  2450, NULL, 10);
INSERT INTO EMP VALUES
        (7788, 'SCOTT',  'ANALYST',   7566,
        sysdate, 3000, NULL, 20);
         
INSERT INTO EMP VALUES
        (7839, 'KING',   'PRESIDENT', NULL,
        sysdate, 5000, NULL, 10);
         
INSERT INTO EMP VALUES
        (7844, 'TURNER', 'SALESMAN',  7698,
        sysdate,  1500,    0, 30);
         
INSERT INTO EMP VALUES
        (7876, 'ADAMS',  'CLERK',     7788,
        sysdate, 1100, NULL, 20);
         
INSERT INTO EMP VALUES
        (7900, 'JAMES',  'CLERK',     7698,
        sysdate,   950, NULL, 30);
         
INSERT INTO EMP VALUES
        (7902, 'FORD',   'ANALYST',   7566,
        sysdate,  3000, NULL, 20);
         
INSERT INTO EMP VALUES
        (7934, 'MILLER', 'CLERK',     7782,
        sysdate, 1300, NULL, 10);
 
CREATE TABLE DEPT
       (DEPTNO NUMBER(2) PRIMARY KEY,
        DNAME VARCHAR2(14),
        LOC VARCHAR2(13) );
 
INSERT INTO DEPT VALUES (10, 'ACCOUNTING', 'NEW YORK');
INSERT INTO DEPT VALUES (20, 'RESEARCH',   'DALLAS');
INSERT INTO DEPT VALUES (30, 'SALES',      'CHICAGO');
INSERT INTO DEPT VALUES (40, 'OPERATIONS', 'BOSTON');
 
CREATE TABLE BONUS
        (ENAME VARCHAR2(10),
         JOB   VARCHAR2(9),
         SAL   NUMBER,
         COMM  NUMBER);
 
CREATE TABLE SALGRADE
        (GRADE NUMBER,
         LOSAL NUMBER,
         HISAL NUMBER);
 
INSERT INTO SALGRADE VALUES (1,  700, 1200);
INSERT INTO SALGRADE VALUES (2, 1201, 1400);
INSERT INTO SALGRADE VALUES (3, 1401, 2000);
INSERT INTO SALGRADE VALUES (4, 2001, 3000);
INSERT INTO SALGRADE VALUES (5, 3001, 9999);
 
CREATE TABLE DUMMY
        (DUMMY NUMBER);
 
INSERT INTO DUMMY VALUES (0);
 
COMMIT;

SELECT * FROM emp;

--JOIN
-- 1. 둘 이상의 테이블을 연결하여 하나의 가상테이블을 만드는 것
-- 2. 보통 둘 이상의 행들을 공통된 값 PK 및 FK값을 사용하여 조인한다.
-- 3. 두개의 테이블을 SELECT문장 안에서 조인하려면 적어도 하나의 컬럼이 그 두 테이블 사이에서 공유되어야 한다.

SELECT * FROM emp;--deptno : FK키
SELECT * FROM dept; --deptno : PK키

--사원은 반드시 하나 이상의 부서에 소속되어야 한다.

--JOIN 종류
-- 1. Equi Join (동등조인)
--ex) dept 테이블과 emp테이블을 조인
SELECT  e.empno, e.ename as 사원이름, d.dname
FROM dept d, emp e
WHERE d.deptno = e.deptno;

--2.Inner Join == Equi Join
--ex) dept테이블과 emp테이블을 Inner 조인
--, 대신에 INNER JOIN을 사용(INNER 생략가능)
-- WHERE 절이 ON절 => JOIN의 조건
SELECT e.empno, e.ename, d.dname
FROM dept d
INNER JOIN emp e
ON d.deptno = e.deptno;

-- 3.NATURAL JOIN == Equi JOIN
-- ex) dept테이블과 emp테이블을 Natural 조인
-- 도일한 컬럼을 내부적으로 모두 조인, ON절(동등조건)이 생략 가능
--단점 : 내부적으로 똑같은걸 다 조인시켜버림 => USING추가

SELECT e.empno, e.ename, d.dname
FROM dept d
NATURAL JOIN emp e;

--USING(deptno); -- 동일한 이름을 가지는 컬럼은 모두 조인되므로 USING을 사용하면 컬럼을 선택해서 조인 가능

--4. Non-Equi Join
-- 테이블의 어떤 컬럼도 Join 할 테이블의 컬럼과 일치하지 않을 때 사용
-- 조인조건은 동등(=) 이외의 연산자를 사용합니다.
-- BETWEEN AND, IS NULL, IS NOT NULL, IN, NOT IN
-- 거의 사용하지 않는다. 

SELECT * FROM salgrade; --등급별 연봉최저액~최고액

--emp테이블과 salgrade테이블의 Non-Equi Join
SELECT e.ename, e.sal, s.grade
FROM emp e, salgrade s
WHERE e.sal
BETWEEN s.losal
AND s.hisal;

--5. Self Join
-- Equi Join과 같으나 하나의 테이블에서 조인이 일어난다는것이 다르다.
-- 같은 테이블에 대해 두 개의 Alias를 사용하여 FROM절에 두개의 테이블 사용하는 것처럼 조인한다.
-- EX) 사원의 매니저이름을 조회하는 SELF JOIN
--조인안하고 찾을수도 있는 정보이지만 편하게 보고 싶을때

SELECT e.ename, a.ename as Manager
FROM emp e, emp a
WHERE e.empno = a.mgr;

--6. Cross Join =  Cartesian Product
-- 검색하고자 했던 데이터뿐 아니라 조인에 사용된 테이블들의 모든 데이터가 반환 되는 현상
-- cartesian Product는 조인 조건을 정의하지 않은 경우 발생한다.
-- CROSS JOIN을 사용하면 cartesian Product값을 얻을 수 있음
--ex) CROSS JOIN 절을 이용하여 Cartesian Product 값을 얻는 예제
SELECT e.empno, e.ename, d.dname
FROM dept d CROSS JOIN emp e;
--emp : 14개, dept:4개 => 14x4 == 56건출력

--7.Outer Join
-- Equi Join은 조인을 생성하려는 두 개의 테이블의 한쪽 컬럼에서 값이 없다면 데이터를 반환하지 못함.
-- 동일 조건에서 조인 조건을 만족하는 값이 없는 행들을 조회하기 위해 Outer Join을 사용
-- Outer Join 연산자는 (+)이다.
-- 조인시 값이 없는 조인측에 (+)를 위치시킨다.
-- Outer Join 연산자는 표현식의 한 편에만 올 수 있다.
-- ex) Equi Join 과 Outer Join의 비교
--    ex1) Equi Join으로 부서번호를 조회

SELECT DISTINCT(e.deptno), d.deptno, d.dname
FROM emp e, dept d
WHERE e.deptno = d.deptno;


--  ex2) Outer Join으로 부서번호를 조회
SELECT DISTINCT(e.deptno), d.deptno, d.dname
FROM emp e, dept d
WHERE e.deptno(+) = d.deptno;

-- ex3) LEFT OUTER JOIN
SELECT DISTINCT(e.deptno), d.deptno, d.dname
FROM dept d
LEFT OUTER JOIN emp e
ON d.deptno = e.deptno;

-- ex4) RIGHT OUTER JOIN (반대쪽에 값 없음)
SELECT DISTINCT(e.deptno), d.deptno, d.dname
From emp e
RIGHT OUTER JOIN dept d
ON e.deptno = d.deptno;

-- ex5) FULL OUTER JOIN
SELECT DISTINCT(e.deptno), d.deptno, d.dname
FROM emp e
FULL OUTER JOIN dept d
ON e.deptno = d.deptno;

--Commit과 Rollback
--DCL(TCL) : 트랜잭션
